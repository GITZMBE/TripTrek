generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}
  
model User {
  id             String        @id @default(cuid())
  name           String
  email          String        @unique
  hashedPassword String
  avatar         String?
  favoriteIds    String[]
  accounts       Account[]
  ownChats       Chat[]        @relation("owner")
  listings       Listing[]
  messages       Message[]
  reservations   Reservation[]
  memberChats    Chat[]        @relation("members")
}

model Account {
  id                String    @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String?
  refresh_token     String?
  access_token      String?
  expires_at        DateTime?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Reservation {
  id         String   @id @default(cuid())
  userId     String
  listingId  String
  startDate  DateTime
  endDate    DateTime
  totalPrice Float
  isAccepted Boolean?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  listing    Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([listingId])
}

model Listing {
  id            String        @id @default(cuid())
  title         String
  description   String
  price         Float
  imageSrc      String
  category      String
  userId        String
  roomCount     Int
  bathroomCount Int
  guestCount    Int
  locationValue String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  chats         Chat[]
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations  Reservation[]

  @@index([userId])
}

model Chat {
  id        String    @id @default(cuid())
  title     String?
  ownerId   String
  listingId String
  memberIds String[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  listing   Listing   @relation(fields: [listingId], references: [id])
  owner     User      @relation("owner", fields: [ownerId], references: [id])
  messages  Message[]
  members   User[]    @relation("members")
}

model Message {
  id        String   @id @default(cuid())
  text      String
  userId    String
  chatId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chat      Chat     @relation(fields: [chatId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}
